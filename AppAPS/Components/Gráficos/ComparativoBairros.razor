@using Radzen
@using Radzen.Blazor
@using System.Globalization
@using Radzen.Blazor.Rendering
@rendermode RenderMode.InteractiveServer

<style>
    .my-popup {
        display: none;
        position: absolute;
        right: 40px;
        transform: translateX(-20%);
        overflow: hidden;
        height: 35vh;
        width: 20%;
        border: var(--rz-panel-border);
        background-color: var(--rz-panel-background-color);
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.25);
        border-radius: var(--rz-border-radius);
    }
</style>

<FluentCard Height="52vh" Width="100%">
    <FluentStack Style="display: flex; flex-direction: row; justify-content: space-between">
        <FluentLabel Typo="Typography.H1">Comparativo por bairro (mês anterior)</FluentLabel>
        <div class="rz-p-0 rz-text-align-right">
            <RadzenButton @ref=button Icon="filter_alt" ButtonStyle="ButtonStyle.Secondary" Click="@(args => popup.ToggleAsync(button.Element))" />
        </div>
    </FluentStack>


    <RadzenStack class="rz-p-0 rz-p-md-0 rz-p-lg-0">
        <RadzenChart Style="height: 45vh">
            <RadzenChartTooltipOptions Shared="@sharedTooltip" />
            <RadzenLineSeries Smooth="@smooth" Data="@DadosGraficoBairro1" CategoryProperty="Periodo" Title="@EnumHelper.GetEnumDescription(PrimeiroBairro)" LineType="LineType.Dashed" ValueProperty="Valor">
                <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Square" />
                <RadzenSeriesDataLabels Visible="@showDataLabels" />
            </RadzenLineSeries>
            <RadzenLineSeries Smooth="@smooth" Data="@DadosGraficoBairro2" CategoryProperty="Periodo" Title="@EnumHelper.GetEnumDescription(SegundoBairro)" ValueProperty="Valor">
                <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle" />
                <RadzenSeriesDataLabels Visible="@showDataLabels" />
            </RadzenLineSeries>
            <RadzenCategoryAxis Padding="20" />

            <RadzenValueAxis>
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="Quantidade" />
            </RadzenValueAxis>
            <RadzenLegend Position="LegendPosition.Bottom" />
        </RadzenChart>
    </RadzenStack>
</FluentCard>

<Popup @ref=popup Lazy=true class="my-popup" Open="@OnOpen">
    <RadzenStack Orientation="Radzen.Orientation.Vertical" Gap="1rem" class="rz-h-100 rz-p-4">
        <FluentCombobox Appearance="Appearance.Filled" TOption="string" Placeholder="Selecione um bairro" ValueChanged="@(e => OnPrimeiroBairroChanged(e))" Autofocus="true" Height="200px">
            @foreach (var item in PrimeiroBairroItems)
            {
                <FluentOption Value="@(EnumHelper.GetEnumDescription(item.Value))">@item.Description</FluentOption>
            }
        </FluentCombobox>
        <FluentCombobox Appearance="Appearance.Filled" TOption="string" Placeholder="Selecione outro bairro" ValueChanged="@(e => OnSegundoBairroChanged(e))" Autofocus="true" Height="200px">
            @foreach (var item in SegundoBairroItems)
            {
                <FluentOption Value="@(EnumHelper.GetEnumDescription(item.Value))">@item.Description</FluentOption>
            }
        </FluentCombobox>
        <FluentStack HorizontalAlignment="HorizontalAlignment.Center" Style="margin-top: 18vh">
            <FluentButton Style="width: 40%;" BackgroundColor="purple" Color="white" Disabled="@DesabilitaBotaoFiltrar()" OnClick="@Filtrar">Filtrar</FluentButton>
        </FluentStack>
    </RadzenStack>
</Popup>


@code {
    [Inject] public IPedidoService pedidoService { get; set; }
    bool smooth = true;
    bool sharedTooltip = true;
    bool showDataLabels = false;
    bool showMarkers = true;
    private List<EnumItem<Bairro>> PrimeiroBairroItems;
    private List<EnumItem<Bairro>> SegundoBairroItems;
    public Bairro PrimeiroBairro { get; set; }
    public Bairro SegundoBairro { get; set; }
    public List<ItemGrafico> DadosGraficoBairro1 { get; set; } = new();
    public List<ItemGrafico> DadosGraficoBairro2 { get; set; } = new();

    RadzenButton button;
    Popup popup;
    int? orderId;
    string searchString = "";

    class DataItem
    {
        public string Date { get; set; }
        public double Revenue { get; set; }
    }

    protected async override Task OnInitializedAsync()
    {
        PrimeiroBairroItems = EnumHelper.GetEnumItems<Bairro>();
        SegundoBairroItems = EnumHelper.GetEnumItems<Bairro>();
    }

    public bool DesabilitaBotaoFiltrar()
    {
        return PrimeiroBairro == 0 || SegundoBairro == 0;
    }

    async Task OnOpen()
    {
        await _jsRuntime.InvokeVoidAsync("eval", "setTimeout(function(){ document.getElementById('search').focus(); }, 200)");
    }

    private void OnPrimeiroBairroChanged(string selectedValue)
    {
        PrimeiroBairro = PrimeiroBairroItems.FirstOrDefault(item => item.Description == selectedValue)?.Value ?? PrimeiroBairro;
        SegundoBairroItems = EnumHelper.GetEnumItems<Bairro>().Where(x => x.Value != PrimeiroBairro).ToList();
        StateHasChanged();
    }

    private async void Filtrar()
    {
        DadosGraficoBairro1 = await pedidoService.GetComparativoPedidosPorBairroMesAnterior(PrimeiroBairro);
        DadosGraficoBairro2 = await pedidoService.GetComparativoPedidosPorBairroMesAnterior(SegundoBairro);
        StateHasChanged();
    }

    private void OnSegundoBairroChanged(string selectedValue)
    {
        SegundoBairro = SegundoBairroItems.FirstOrDefault(item => item.Description == selectedValue)?.Value ?? SegundoBairro;
        PrimeiroBairroItems = EnumHelper.GetEnumItems<Bairro>().Where(x => x.Value != SegundoBairro).ToList();
        StateHasChanged();
    }

    DataItem[] revenue2023 = new DataItem[] {
        new DataItem
        {
            Date = "Jan",
            Revenue = 234000
        },
        new DataItem
        {
            Date = "Feb",
            Revenue = 269000
        },
        new DataItem
        {
            Date = "Mar",
            Revenue = 233000
        },
        new DataItem
        {
            Date = "Apr",
            Revenue = 244000
        },
        new DataItem
        {
            Date = "May",
            Revenue = 214000
        },
        new DataItem
        {
            Date = "Jun",
            Revenue = 253000
        },
        new DataItem
        {
            Date = "Jul",
            Revenue = 274000
        },
        new DataItem
        {
            Date = "Aug",
            Revenue = 284000
        },
        new DataItem
        {
            Date = "Sept",
            Revenue = 273000
        },
        new DataItem
        {
            Date = "Oct",
            Revenue = 282000
        },
        new DataItem
        {
            Date = "Nov",
            Revenue = 289000
        },
        new DataItem
        {
            Date = "Dec",
            Revenue = 294000
        }
    };

    DataItem[] revenue2024 = new DataItem[] {
        new DataItem
        {
            Date = "Jan",
            Revenue = 334000
        },
        new DataItem
        {
            Date = "Feb",
            Revenue = 369000
        },
        new DataItem
        {
            Date = "Mar",
            Revenue = 333000
        },
        new DataItem
        {
            Date = "Apr",
            Revenue = 344000
        },
        new DataItem
        {
            Date = "May",
            Revenue = 314000
        },
        new DataItem
        {
            Date = "Jun",
            Revenue = 353000
        },
        new DataItem
        {
            Date = "Jul",
            Revenue = 374000
        },
        new DataItem
        {
            Date = "Aug",
            Revenue = 384000
        },
        new DataItem
        {
            Date = "Sept",
            Revenue = 373000
        },
        new DataItem
        {
            Date = "Oct",
            Revenue = 382000
        },
        new DataItem
        {
            Date = "Nov",
            Revenue = 389000
        },
        new DataItem
        {
            Date = "Dec",
            Revenue = 394000
        }
    };
}
