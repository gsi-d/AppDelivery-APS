@page "/produtoDetalhes/{Id}"
@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering]

<style>
    .fluent-label {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 2;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .fluent-label-nome {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 1;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>

<PageTitle>Página inicial</PageTitle>


<FluentStack Style="display: flex; align-items: center; justify-content: center">
    <FluentCard Width="80%" Height="90%">
        @{
            if (Produto is not null)
            {
                <FluentStack>
                    <FluentStack>
                        <FluentCard Style="padding: 0;" Width="100%" Height="100%">
                            <img src="@Produto.NomeArquivoUpload" style="object-fit: cover; height: 70vh; width: 100%" />
                        </FluentCard>
                    </FluentStack>
                    <FluentStack Style="display: flex; flex-direction: column; padding: 10px">
                        <FluentStack HorizontalAlignment="HorizontalAlignment.Center">
                            <FluentLabel Typo="Typography.H1">@Produto.Nome</FluentLabel>
                            </FluentStack>
                            <FluentStack Style="display: flex; flex-direction: column">
                                <FluentLabel Style="font-size: 25px" Typo="Typography.Subject">@Produto.Descricao</FluentLabel>
                                @* Precisa ser substituída pela listagem de ingredientes da ficha *@
                                @{
                                if (Produto.FichaTecnica.Ingredientes != null && Produto.FichaTecnica.Ingredientes.Any())
                                {
                                    <FluentStack Style="padding: 10px; display: flex; align-items: center" HorizontalAlignment="HorizontalAlignment.Center" Width="30vw">
                                        <FluentCard Height="Auto" Style="padding: 10px;">
                                            <FluentDataGrid id="defaultGrid" Items="@Produto.FichaTecnica.Ingredientes.AsQueryable()" ShowHover="true" TGridItem="IngredienteFichaTecnica">
                                                <PropertyColumn Width="200px" Property="@(p => EnumHelper.GetEnumDescription(p.Ingrediente))" Title="Ingredientes" />
                                                <PropertyColumn Width="120px" Property="@(p => p.Quantidade)" Title="Quantidade" />
                                                <PropertyColumn Width="100px" Property="@(p => EnumHelper.GetEnumDescription(p.Medida))" Title="Medida" />
                                            </FluentDataGrid>
                                        </FluentCard>
                                    </FluentStack>
                                }
                            }
                        </FluentStack>
                        <FluentDivider />

                    </FluentStack>
                </FluentStack>
            }
            else
            {
                <FluentLabel Typo="Typography.H2">Produto não encontrado.</FluentLabel>
            }
        }
    </FluentCard>
</FluentStack>


<TrocaVisualizacao PrimeiraDefinicao="false" bDesabilitaDialogTrocaVisu="@bDesabilitaDialogTrocaVisu" />

<FluentStack Style="position: fixed; bottom: 20px; left: 10px;" Width="20%">
    <FluentButton BackgroundColor="purple" Color="white" OnClick="() => bDesabilitaDialogTrocaVisu = false">Altera Modo Visualização</FluentButton>
</FluentStack>

<Loading ExibeLoading="@sessaoUsuario._loading" />

@code {
    [Parameter] public string Id { get; set; }
    [Inject] private IProdutoService ProdutoService { get; set; }
    [Inject] private SessaoUsuario sessaoUsuario { get; set; }
    [Inject] private IMapper mapper { get; set; }
    private List<EnumItem<TipoUsuario>> TiposUsuario = new List<EnumItem<TipoUsuario>>();
    public Produto? Produto;
    public decimal Numero { get; set; }
    public int IdProduto { get; set; }
    public bool bDesabilitaDialogTrocaVisu { get; set; } = true;

    protected async override Task OnInitializedAsync()
    {
        sessaoUsuario.IniciaLoading();
        TiposUsuario = EnumHelper.GetEnumItems<TipoUsuario>();
        IdProduto = Convert.ToInt32(Id);
        Produto = await ProdutoService.GetByIdProduto(IdProduto);
        sessaoUsuario.FinalizaLoading();
    }

    private void OnTipoUsuarioChanged(string selectedValue)
    {
        sessaoUsuario.TipoUsuario = TiposUsuario.FirstOrDefault(item => item.Description == selectedValue)?.Value ?? sessaoUsuario.TipoUsuario;
    }
    }
