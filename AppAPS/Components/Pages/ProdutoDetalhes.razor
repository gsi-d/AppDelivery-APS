@page "/produtoDetalhes/{Id}"
@using AppAPS.DTOs
@using AppAPS.Entities
@using AppAPS.Interfaces
@using AppAPS.Services.Model
@using AutoMapper
@rendermode RenderMode.InteractiveServer

<style>
    .fluent-label {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 2;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .fluent-label-nome {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 1;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>

<PageTitle>Página inicial</PageTitle>


<FluentStack Style="display: flex; align-items: center; justify-content: center">
    <FluentCard Width="100%" Height="90%">
        <FluentStack @* Style="background-color: blue" *@>
            <FluentStack @* Style="background-color: red" *@>
                <FluentCard Style="padding: 0;" Width="100%" Height="100%">
                    <img src="@Produto.NomeArquivoUpload" style="object-fit: cover; height: 60vh; width: 100%" />
                </FluentCard>
            </FluentStack>
            <FluentStack Style="@* background-color: green *@; display: flex; flex-direction: column; padding: 10px">
                <FluentStack HorizontalAlignment="HorizontalAlignment.Center">
                    <FluentLabel Typo="Typography.H2">@Produto.Nome</FluentLabel>
                </FluentStack>
                <FluentLabel Typo="Typography.Subject">@Produto.Descricao</FluentLabel>
                <FluentDivider />
                <FluentStack>
                    <FluentLabel Typo="Typography.H5" Style="margin-top: 3px">Quantidade:</FluentLabel>
                    <FluentNumberField @bind-Value="@Numero" Size="1" Min="0"></FluentNumberField>
                    <FluentButton IconStart="@(new Icons.Regular.Size20.Cart())" Appearance="Appearance.Accent"></FluentButton>
                </FluentStack>
            </FluentStack>
        </FluentStack>
    </FluentCard>
</FluentStack>

@* Precisa ser substituída pela listagem de fichas técnicas *@
<FluentCard Style="margin-top: 20px">
    <Produtos />
</FluentCard>

<FluentStack Style="position: fixed; bottom: 20px; left: 10px">
    <FluentCombobox Position="SelectPosition.Above" TOption="string" Placeholder="Modo de visualização" ValueChanged="@(e => OnTipoUsuarioChanged(e))" Autofocus="true" Height="200px" Required>
        @foreach (var item in TiposUsuario)
        {
            <FluentOption Value="@(EnumHelper.GetEnumDescription(item.Value))">@item.Description</FluentOption>
        }
    </FluentCombobox>
</FluentStack>

@code {
    [Parameter] public string Id { get; set; }
    [Inject] private IProdutoService produtoService { get; set; }
    [Inject] private SessaoUsuario sessaoUsuario { get; set; }
    [Inject] private IMapper mapper { get; set; }
    public Produto Produto = new();
    public decimal Numero { get; set; }
    public int IdProduto { get; set; }

    protected async override Task OnInitializedAsync()
    {
        TiposUsuario = EnumHelper.GetEnumItems<TipoUsuario>();
        IdProduto = Convert.ToInt32(Id);
        // Produto = await produtoService.GetByIdProdutos(IdProduto);
        Produto = sessaoUsuario.Produtos.FirstOrDefault(produto => produto.Id == IdProduto);
    }

    private List<EnumItem<TipoUsuario>> TiposUsuario;

    private void OnTipoUsuarioChanged(string selectedValue)
    {
        sessaoUsuario.TipoUsuario = TiposUsuario.FirstOrDefault(item => item.Description == selectedValue)?.Value ?? sessaoUsuario.TipoUsuario;
    }
}
