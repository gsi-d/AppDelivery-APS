@page "/produtos"
@rendermode InteractiveServer

<PageTitle>Produtos</PageTitle>

@{
    if (produtos is not null && produtos.Any())
    {
        <h1>Listagem de Produtos</h1>
        <FluentCard Height="Auto" Style="padding: 10px;">
            <FluentStack VerticalAlignment="VerticalAlignment.Center" Style="padding-bottom: 4px;">
                <FluentButton Type="ButtonType.Button" OnClick="InvokeTelaCadastro" Appearance="Appearance.Accent">Novo</FluentButton>
                <FluentButton Type="ButtonType.Button" OnClick="ExcluirProdutos" Appearance="Appearance.Accent" BackgroundColor="red">Excluir</FluentButton>
            </FluentStack>

            <FluentDivider />

            <FluentDataGrid Items="@produtos" ShowHover="true" TGridItem="Produto">
                <SelectColumn TGridItem="Produto"
                              SelectMode="DataGridSelectMode.Multiple"
                              SelectFromEntireRow="true"
                              @bind-SelectedItems="@SelectedItems" />
                <PropertyColumn Width="100px" Property="@(p => p.Id)" Title="Id" />
                <PropertyColumn Width="300px" Property="@(p => p.Nome)" />
                <PropertyColumn Width="300px" Property="@(p => p.Descricao)" />
            </FluentDataGrid>
        </FluentCard>
    }
    else
    {
        <FluentLabel Typo="Typography.H2">Não há produtos cadastrados.</FluentLabel>
    }
}


<FluentStack Style="position: fixed; bottom: 20px; left: 10px">
    <FluentCombobox Position="SelectPosition.Above" TOption="string" Placeholder="Modo de visualização" ValueChanged="@(e => OnTipoUsuarioChanged(e))" Autofocus="true" Height="200px" Required>
        @foreach (var item in TiposUsuario)
        {
            <FluentOption Value="@(EnumHelper.GetEnumDescription(item.Value))">@item.Description</FluentOption>
        }
    </FluentCombobox>
</FluentStack>


@code {
    [Inject] private SessaoUsuario sessaoUsuario { get; set; }
    [Inject] private IProdutoService ProdutoService { get; set; }
    public IEnumerable<Produto> SelectedItems = new List<Produto>();
    public IQueryable<Produto>? produtos;

    protected async override Task OnInitializedAsync()
    {
        TiposUsuario = EnumHelper.GetEnumItems<TipoUsuario>();
        var resultadoProdutos = await ProdutoService.GetAllProdutos();
        produtos = resultadoProdutos.AsQueryable();
    }

    private async void InvokeTelaCadastro()
    {
        _navigationManager.NavigateTo("/cadastroProduto");
    }

    private async void ExcluirProdutos()
    {
        bool sucesso = await ProdutoService.DeletarProdutos(SelectedItems.ToList());
        if (sucesso)
        {
            ToastService.ShowSuccess("Exclusão bem sucedida.");
            var resultadoProdutos = await ProdutoService.GetAllProdutos();
            produtos = resultadoProdutos.AsQueryable();
        }
    }

    private List<EnumItem<TipoUsuario>> TiposUsuario;

    private void OnTipoUsuarioChanged(string selectedValue)
    {
        sessaoUsuario.TipoUsuario = TiposUsuario.FirstOrDefault(item => item.Description == selectedValue)?.Value ?? sessaoUsuario.TipoUsuario;
    }
}
