@page "/acompanhamentoPedidos/"
@rendermode RenderMode.InteractiveServer

<style>
    .fluent-label {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 2;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .fluent-label-nome {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 1;
        overflow: hidden;
        text-overflow: ellipsis;
    }

        .fluent-label-nome:hover {
            pointer-events: none;
        }

    .text-field {
        width: 100%;
    }

    .width-maximo {
        width: 100%;
    }

    .neutral:hover {
        pointer-events: none;
    }
</style>

<PageTitle>Acompanhamento pedidos</PageTitle>

<FluentStack HorizontalAlignment="HorizontalAlignment.Center">
    <FluentCard Width="90%" Height="90%" Style="display: flex; flex-wrap: wrap; gap: 10px;">
        <FluentStack HorizontalAlignment="HorizontalAlignment.Center" Style="max-height: 85vh; overflow-y: auto">
            <FluentStack Width="100%" Style="display: flex; flex-wrap: wrap; gap: 10px;">
                @{
                    if (Pedidos != null && Pedidos.Any())
                    {
                        foreach (Pedido pedido in Pedidos)
                        {
                            <FluentStack Style="display:flex; flex-direction: row;">
                                <FluentStack Width="100%" Style="height 10vh;" VerticalAlignment="VerticalAlignment.Center">
                                    <FluentStack Style="display:flex; flex-direction: column; gap: 2; max-width: 15vw;">
                                        <FluentLabel Typo="Typography.H2" Color="Color.Accent" Class="fluent-label-nome">
                                            Cód:
                                            @pedido.Id
                                        </FluentLabel>
                                        <FluentLabel Typo="Typography.H3" Class="fluent-label-nome">@pedido.Cliente</FluentLabel>
                                        <FluentButton Color="white" BackgroundColor="@DefineCorStatus(pedido.Status)"
                                                      Stye="pointer-events: none;">
                                            <FluentLabel Color="Color.Lightweight" Typo="Typography.Subject"
                                                         Class="fluent-label-nome">
                                                @EnumHelper.GetEnumDescription(pedido.Status)
                                            </FluentLabel>
                                        </FluentButton>
                                        <FluentLabel Typo="Typography.Body" Class="fluent-label">
                                            @pedido.DataAbertura.ToString("dd/MM HH:mm")
                                        </FluentLabel>
                                    </FluentStack>

                                    <FluentStack Style="display:flex; flex-direction: column; gap: 1; max-width: 15vw;">
                                        <FluentLabel Typo="Typography.Subject" Class="fluent-label-nome">@pedido.Rua</FluentLabel>
                                        <FluentLabel Typo="Typography.Body" Class="fluent-label-nome">
                                            @EnumHelper.GetEnumDescription(pedido.Bairro)
                                        </FluentLabel>
                                        <FluentLabel Typo="Typography.Subject" Class="fluent-label-nome">
                                            @EnumHelper.GetEnumDescription(pedido.FormaEntrega)
                                        </FluentLabel>
                                        <FluentLabel Typo="Typography.Subject" Class="fluent-label-nome">
                                            @EnumHelper.GetEnumDescription(pedido.FormaPagamento)
                                        </FluentLabel>
                                    </FluentStack>
                                    <SeletorStatus Pedido="pedido" AtualizaStatus="AtualizaStatus" tipoUsuario="TipoUsuario" />
                                </FluentStack>
                            </FluentStack>
                            <FluentStack HorizontalAlignment="HorizontalAlignment.Right">
                                <FluentLabel Typo="Typography.Body">
                                    Última atualização:
                                    @pedido.DataUltimaAtualizacao.ToString("dd/MM HH:mm")
                                </FluentLabel>
                            </FluentStack>
                            <FluentDivider Style="background-color: black; width: 100%; height: 2px" />
                        }
                    }
                    else
                    {
                        <FluentLabel Typo="Typography.H2">Não há pedidos em andamento.</FluentLabel>
                    }
                }
            </FluentStack>
        </FluentStack>
    </FluentCard>
</FluentStack>

@code {
    [Inject] private SessaoUsuario sessaoUsuario { get; set; }
    [Inject] private IPedidoService PedidoService { get; set; }
    public bool bDesabilitaDialogTrocaVisu { get; set; } = true;
    public List<Pedido> Pedidos = new();
    public List<ProdutoItemDTO> produtosItens = new();
    public decimal Numero { get; set; }
    public int IdProduto { get; set; }
    public decimal TotalPedido { get; set; }
    private int pedidoStatusInt;
    private bool DesabilitaBotaoConfirmado;
    private TipoUsuario TipoUsuario;
    WizardStepSequence StepSequence = WizardStepSequence.Any;

    protected async override Task OnAfterRenderAsync(bool firstrender)
    {
        if (firstrender)
            await DefineListagemPedidosPorTipoUsuario();
    }

    private void OnQuantidadeChanged(int novaQuantidade, ProdutoItemDTO produtoItem)
    {
        produtoItem.Quantidade = novaQuantidade;
        produtoItem.ValorTotal = novaQuantidade * produtoItem.Preco;
        AtualizaTotal();
    }

    public string DefineCorStatus(StatusPedido status)
    {
        switch (status)
        {
            case StatusPedido.Confirmado:
                return "palevioletred";
            case StatusPedido.EmPreparo:
                return "coral";
            case StatusPedido.ProntoParaEntrega:
                return "goldenrod";
            case StatusPedido.EmTransito:
                return "blue";
            case StatusPedido.Finalizado:
                return "green";
            default:
                return "";
        }
    }

    public void AtualizaStatus(PedidoStatusDTO pedidoStatusDTO)
    {
        pedidoStatusDTO.Pedido.DataUltimaAtualizacao = DateTime.Now;
        pedidoStatusDTO.Pedido.Status = pedidoStatusDTO.NovoStatus;
        if (pedidoStatusDTO.NovoStatus == StatusPedido.Finalizado)
            pedidoStatusDTO.Pedido.DataFinalizacao = DateTime.Now;
    }

    private void AtualizaTotal()
    {
        produtosItens.ToList().ForEach(item => TotalPedido += item.ValorTotal);
    }

    private async Task DefineListagemPedidosPorTipoUsuario()
    {
        string? tipoUsuarioStorage = await _localStorage.GetItemAsync<string>("TipoUsuario");
        Enum.TryParse(tipoUsuarioStorage, out TipoUsuario tipoUsuario);
        TipoUsuario = tipoUsuario;

        switch (tipoUsuario)
        {
            case TipoUsuario.Restaurante:
                Pedidos = await PedidoService.GetAllPedidosDiaAtual();
                Pedidos = Pedidos.OrderBy(pedido => pedido.DataAbertura).ThenBy(pedido => pedido.Status).ToList();
                break;
            case TipoUsuario.Entregador:
                Pedidos = await PedidoService.GetPedidosEntregadorDiaAtual();
                break;
            case TipoUsuario.Cliente:
                string? cpf = await _localStorage.GetItemAsync<string>("CPF");
                if (cpf is not null)
                {
                    Pedidos = await PedidoService.GetPedidosClienteDiaAtual(cpf);
                    Pedidos = Pedidos.OrderBy(pedido => pedido.DataAbertura).ThenBy(pedido => pedido.Status).ToList();
                }
                else
                {
                    Pedidos = await PedidoService.GetAllPedidosDiaAtual();
                    Pedidos = Pedidos.OrderBy(pedido => pedido.DataAbertura).ThenBy(pedido => pedido.Status).ToList();
                }
                break;
        }
        StateHasChanged();
    }
}
