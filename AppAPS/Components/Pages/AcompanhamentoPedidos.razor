@page "/acompanhamentoPedidos/"
@using AppAPS.DTOs
@using AppAPS.Entities
@using AppAPS.Interfaces
@using AppAPS.Services.Model
@using AutoMapper
@inject IDialogService DialogService
@rendermode RenderMode.InteractiveServer

<style>
    .fluent-label {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 2;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .fluent-label-nome {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 1;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .text-field {
        width: 100%;
    }

    .width-maximo {
        width: 100%;
    }

    .fluent-wizard-buttons {
        display: none !important;
    }

</style>

<PageTitle>Acompanhamento pedidos</PageTitle>

<FluentStack HorizontalAlignment="HorizontalAlignment.Center">
    <FluentCard Width="80%" Height="90%" Style="display: flex; flex-wrap: wrap; gap: 10px;">
        <FluentStack HorizontalAlignment="HorizontalAlignment.Center" Style="max-height: 85vh; overflow-y: auto">
            <FluentStack Width="100%" Style="display: flex; flex-wrap: wrap; gap: 10px;">
                @{
                    if (Pedidos != null && Pedidos.Any())
                    {
                        foreach (Pedido pedido in Pedidos)
                        {
                            <FluentStack Style="display:flex; flex-direction: row;">
                                <FluentStack Width="100%" Style="height 10vh;">
                                    <FluentStack Style="display:flex; flex-direction: column; gap: 2; max-width: 15vw">
                                        <FluentLabel Typo="Typography.H2" Color="Color.Accent" Class="fluent-label-nome">Cód: @pedido.Id</FluentLabel>
                                        <FluentLabel Typo="Typography.H3" Class="fluent-label-nome">@pedido.Cliente</FluentLabel>
                                        <FluentButton Appearance="Appearance.Accent" Color="white" BackgroundColor="@DefineCorStatus(pedido.Status)" Stye="pointer-events: none;">
                                            <FluentLabel Typo="Typography.Subject" Class="fluent-label-nome">@EnumHelper.GetEnumDescription(pedido.Status)</FluentLabel>
                                        </FluentButton>
                                        <FluentLabel Typo="Typography.Body" Class="fluent-label">@pedido.DataAbertura.ToString("dd/MM HH:mm")</FluentLabel>
                                    </FluentStack>

                                    <FluentStack Style="display:flex; flex-direction: column; gap: 1; max-width: 15vw">
                                        <FluentLabel Typo="Typography.Subject" Class="fluent-label-nome">@pedido.Rua</FluentLabel>
                                        <FluentLabel Typo="Typography.Body" Class="fluent-label-nome">@EnumHelper.GetEnumDescription(pedido.Bairro)</FluentLabel>
                                        <FluentLabel Typo="Typography.Subject" Class="fluent-label-nome">@EnumHelper.GetEnumDescription(pedido.FormaEntrega)</FluentLabel>
                                        <FluentLabel Typo="Typography.Subject" Class="fluent-label-nome">@EnumHelper.GetEnumDescription(pedido.FormaPagamento)</FluentLabel>
                                    </FluentStack>
                                    <FluentStack>
                                        <FluentWizard StepperPosition="@(StepperPosition.Top)"
                                                      StepSequence="@StepSequence"
                                                      DisplayStepNumber="@(WizardStepStatus.Current | WizardStepStatus.Next)"
                                                      Border="WizardBorder.All"
                                                      StepTitleHiddenWhen="@GridItemHidden.XsAndDown"
                                                      OnFinish="@OnFinishedAsync" Height="10%"
                                                      Value="@(pedido.StatusInt)"
                                                      ValueChanged="@(newValue => OnChangedStep(pedido, newValue))">
                                            <Steps>
                                                <FluentWizardStep Label="Confirmado" Summary=@($"Pedido aberto às {pedido.DataAbertura:HH:mm}.")
                                                                  IconPrevious="@(new Icons.Filled.Size24.AlertOn())"
                                                                  IconCurrent="@(new Icons.Filled.Size24.AlertOn())"
                                                                  IconNext="@(new Icons.Regular.Size24.AlertOn())"
                                                                  DisplayStepNumber="false">
                                                </FluentWizardStep>
                                                <FluentWizardStep Label="Em preparo"
                                                                  IconPrevious="@(new Icons.Filled.Size24.ClockPause())"
                                                                  IconCurrent="@(new Icons.Filled.Size24.Clock())"
                                                                  IconNext="@(new Icons.Regular.Size24.FoodPizza())"
                                                                  DisplayStepNumber="false">
                                                </FluentWizardStep>
                                                <FluentWizardStep Label="Pronto para entrega"
                                                                  IconPrevious="@(new Icons.Filled.Size24.ClockPause())"
                                                                  IconCurrent="@(new Icons.Filled.Size20.RadarCheckmark())"
                                                                  IconNext="@(new Icons.Regular.Size24.Checkmark())"
                                                                  DisplayStepNumber="false">
                                                </FluentWizardStep>
                                                <FluentWizardStep Label="Em Trânsito" IconPrevious="@(new Icons.Filled.Size24.ClockPause())"
                                                                  IconCurrent="@(new Icons.Filled.Size24.VehicleCarProfileLtrClock())"
                                                                  IconNext="@(new Icons.Regular.Size24.CheckmarkCircle())"
                                                                  DisplayStepNumber="false">
                                                </FluentWizardStep>
                                                <FluentWizardStep Label="Finalizado" IconPrevious="@(new Icons.Filled.Size24.ClockPause())"
                                                                  IconCurrent="@(new Icons.Filled.Size24.Checkmark())"
                                                                  IconNext="@(new Icons.Regular.Size24.Checkmark())"
                                                                  DisplayStepNumber="false">
                                                </FluentWizardStep>
                                            </Steps>
                                        </FluentWizard>
                                    </FluentStack>
                                </FluentStack>
                            </FluentStack>
                            <FluentDivider Style="background-color: black; width: 100%; height: 2px" />
                        }
                    }
                    else
                    {
                        <FluentLabel Typo="Typography.H2">Não há registros cadastrados.</FluentLabel>
                    }
                }
            </FluentStack>
        </FluentStack>
    </FluentCard>
</FluentStack>


@code {
    [Inject] private SessaoUsuario sessaoUsuario { get; set; }
    public List<Pedido> Pedidos = new();
    public List<ProdutoItemDTO> produtosItens = new();
    public decimal Numero { get; set; }
    public int IdProduto { get; set; }
    public decimal TotalPedido { get; set; }
    private int pedidoStatusInt;
    WizardStepSequence StepSequence = WizardStepSequence.Any;

    protected async override Task OnInitializedAsync()
    {
        Pedidos = sessaoUsuario.Pedidos;
    }

    private void OnQuantidadeChanged(int novaQuantidade, ProdutoItemDTO produtoItem)
    {
        produtoItem.Quantidade = novaQuantidade;
        produtoItem.ValorTotal = novaQuantidade * produtoItem.Preco;
        AtualizaTotal();
    }

    public string DefineCorStatus(StatusPedido status)
    {
        switch (status)
        {
            case StatusPedido.Confirmado:
                return "palevioletred";
            case StatusPedido.EmPreparo:
                return "coral";
            case StatusPedido.ProntoParaEntrega:
                return "lightyellow";
            case StatusPedido.EmTransito:
                return "lightblue";
            case StatusPedido.Finalizado:
                return "lightgreen";
            default:
                return "";
        }
    }

    private void AtualizaTotal()
    {
        produtosItens.ToList().ForEach(item => TotalPedido += item.ValorTotal);
    }

    private Task OnChangedStep(Pedido pedido, int selectedValue)
    {
        pedido.Status = (StatusPedido)selectedValue;
        return Task.CompletedTask;
    }


    async Task OnFinishedAsync()
    {
        await DialogService.ShowSuccessAsync("O pedido {numeroPedido} foi finalizado", "Pedido finalizado.");
    }
}
