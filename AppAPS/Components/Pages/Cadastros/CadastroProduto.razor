@page "/cadastroProduto"
@using AppAPS.Entities
@using AppAPS.Interfaces
@using AppAPS.Services.Model
@rendermode RenderMode.InteractiveServer

<style>
    .text-field {
        width: 100%;
    }

    .width-maximo {
        width: 100%;
    }
</style>

<PageTitle>Cadastro de Produtos</PageTitle>

<FluentStack Style="display: flex; flex-direction: column; align-items: center; justify-content: center; width: 100%;">
    <h1>Cadastro de Produtos</h1>
    <FluentGrid Justify="@JustifyContent.Center">
        <FluentGridItem>
            <FluentCard>
                <EditForm Model="@ProdutoModel" OnValidSubmit="@HandleValidSubmit" FormName="ProdutoModel_fluent_entry" novalidate>
                    <DataAnnotationsValidator />
                    <FluentValidationSummary />


                    <FluentStack Style="width: 30vw; " VerticalGap="25" Orientation="Orientation.Vertical">
                        <div class="width-maximo">
                            <FluentTextField Appearance="FluentInputAppearance.Filled" Class="text-field" Name="Nome do Produto" @bind-Value="ProdutoModel.Nome" Label="Nome do Produto" Required />
                             <FluentValidationMessage For="@(() => ProdutoModel.Nome)" />
                         </div>
                         <div class="width-maximo">
                             <FluentTextArea Appearance="FluentInputAppearance.Filled" Class="width-maximo" Name="Descricao" Rows=5 @bind-Value="ProdutoModel.Descricao" Label="Descrição do Produto" Required />
                             <FluentValidationMessage For="@(() => ProdutoModel.Descricao)" />
                         </div>
                         <div>
                             <FluentNumberField Appearance="FluentInputAppearance.Filled" Placeholder="R$" Class="text-field" Name="Preço" @bind-Value="ProdutoModel.Preco" Label="Preço" HideStep=true Required />
                             <FluentValidationMessage For="@(() => ProdutoModel.Preco)" />
                         </div>
                         <div>
                             <FluentLabel>Selecione uma imagem</FluentLabel>
                             <InputFile OnChange="@SelectFile" />
                         </div>
                         <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Salvar</FluentButton>
                     </FluentStack>
                 </EditForm>
             </FluentCard>
         </FluentGridItem>
     </FluentGrid>
 </FluentStack>

<FluentStack Style="position: fixed; bottom: 20px; left: 10px">
    <FluentCombobox Position="SelectPosition.Above" TOption="string" Placeholder="Modo de visualização" ValueChanged="@(e => OnTipoUsuarioChanged(e))" Autofocus="true" Height="200px" Required>
        @foreach (var item in TiposUsuario)
        {
            <FluentOption Value="@(EnumHelper.GetEnumDescription(item.Value))">@item.Description</FluentOption>
        }
    </FluentCombobox>
</FluentStack>

@code {
    [Inject] private SessaoUsuario sessaoUsuario { get; set; }
    [SupplyParameterFromForm]
    private Produto ProdutoModel { get; set; } = new();

    [Inject] private IProdutoService produtoService { get; set; }
    [Inject] private IUploadService uploadService { get; set; }

    List<string> mensagens = new();
    public IBrowserFile Arquivo { get; set; }
    ArquivoUpload arquivoUpload = new();
    private string pageTitle => ProdutoModel.Id != 0 ? "Edita Aluno" : "Novo Aluno";


    protected override void OnInitialized()
    {
        TiposUsuario = EnumHelper.GetEnumItems<TipoUsuario>();        
    }

    private void SelectFile(InputFileChangeEventArgs e)
    {
        Arquivo = e.File;
    }

    private async void HandleValidSubmit()
    {
        if (ProdutoModel != null)
        {
            if (Arquivo != null)
            {
                (int statusCode, string nomeArquivoMensagem) =
                    await uploadService.ArquivoUploadAsync(Arquivo);
                if (statusCode == 1)
                {
                    ProdutoModel.NomeArquivoUpload = nomeArquivoMensagem;
                    Produto produtoInserido = await produtoService.InserirProduto(ProdutoModel);
                    if (produtoInserido != null)
                    {
                        ToastService.ShowSuccess("Produto inserido com sucesso.");
                        _navigationManager.NavigateTo("/produtos");
                        await Task.Delay(3000);
                    }
                    else
                    {
                        ToastService.ShowError("Falha ao inserir produto.");
                        await Task.Delay(3000);
                    }
                }
                else
                {
                    ToastService.ShowError("Falha ao carregar imagem. Erro: " + nomeArquivoMensagem);
                    await Task.Delay(3000);
                }
            }
            else
            {
                ToastService.ShowError("Você precisa selecionar uma imagem.");
                await Task.Delay(3000);
            }
        }
        else
        {
            ToastService.ShowError("Falha ao inserir produto.");
            await Task.Delay(3000);
        }
    }

    private List<EnumItem<TipoUsuario>> TiposUsuario;

    private void OnTipoUsuarioChanged(string selectedValue)
    {
        sessaoUsuario.TipoUsuario = TiposUsuario.FirstOrDefault(item => item.Description == selectedValue)?.Value ?? sessaoUsuario.TipoUsuario;
    }
}