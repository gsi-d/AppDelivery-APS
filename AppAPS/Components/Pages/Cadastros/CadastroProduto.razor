@page "/cadastroProduto"
@using AppAPS.Entities
@using AppAPS.Interfaces
@using AppAPS.Services.Model
@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering]

<style>
    body {
        font-family: Arial, sans-serif;
    }

    .container-formulario {
        display: flex;
        flex-direction: column;
        justify-content: center;
        gap: 10px;
        align-items: center;
        min-height: 100vh;
        background-color: #f4f4f4;
    }

    .cartao-formulario {
        width: 60vw;
        padding: 30px;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .titulo-formulario {
        text-align: center;
        color: #0078d4;
        font-size: 1.8em;
        margin-bottom: 20px;
        font-weight: bold;
    }

    .campo-formulario {
        width: 100%;
        margin-bottom: 20px;
    }

        .campo-formulario label {
            display: block;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .campo-formulario input,
        .campo-formulario textarea {
            width: 100%;
            padding: 12px;
            font-size: 1.1em;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
        }

    fluent-text-field,
    fluent-text-area,
    fluent-number-field {
        width: 100% !important;
    }

    .campo-formulario textarea {
        resize: vertical;
        height: 100px;
    }

    .grupo-checkbox {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
    }

    .botao-formulario {
        width: 100%;
        padding: 12px;
        background-color: #0078d4;
        color: white;
        font-size: 1.2em;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin-top: 30px;
    }

        .botao-formulario:hover {
            background-color: #005a9e;
        }

    .grupo-checkbox {
        gap: 15px;
        align-items: center;
    }

    .campo-formulario input[type="file"] {
        padding: 10px;
        width: 100%;
        font-size: 1em;
        border-radius: 5px;
        box-sizing: border-box;
    }

    .rodape-formulario {
        text-align: center;
        margin-top: 30px;
        margin-bottom: 30px;
    }

        .rodape-formulario a {
            color: #0078d4;
            font-size: 1.1em;
            text-decoration: none;
            padding: 10px 20px;
            border: 2px solid #0078d4;
            border-radius: 5px;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

            .rodape-formulario a:hover {
                background-color: #0078d4;
                color: white;
            }

    .DataGrid {
        align-items: center;
    }

    .FT {
        text-align: center;
        color: #0078d4;
        margin-top: 15px;
    }
</style>

<PageTitle>Cadastro de Produtos</PageTitle>

<div class="container-formulario">
    <div class="cartao-formulario">
        <h1 class="titulo-formulario">Cadastro de Produtos</h1>
        <EditForm Model="@ProdutoModel" OnValidSubmit="@HandleValidSubmit" FormName="ProdutoModel_fluent_entry" novalidate>
            <DataAnnotationsValidator />
            <FluentValidationSummary />

            <div class="campo-formulario">
                <label for="Nome">Nome do Produto</label>
                <FluentTextField Appearance="FluentInputAppearance.Filled" Id="Nome" @bind-Value="ProdutoModel.Nome" Required />
                 <FluentValidationMessage For="@(() => ProdutoModel.Nome)" />
             </div>

             <div class="campo-formulario">
                 <label for="Descricao">Descrição do Produto</label>
                 <FluentTextArea Appearance="FluentInputAppearance.Filled" Id="Descricao" Rows="4" @bind-Value="ProdutoModel.Descricao" Required />
                 <FluentValidationMessage For="@(() => ProdutoModel.Descricao)" />
             </div>

             <div class="campo-formulario">
                 <label for="Preco">Preço</label>
                 <FluentNumberField Appearance="FluentInputAppearance.Filled" Id="Preco" Placeholder="R$" @bind-Value="ProdutoModel.Preco" HideStep="true" Required />
                 <FluentValidationMessage For="@(() => ProdutoModel.Preco)" />
             </div>

             <div class="grupo-checkbox">
                 <FluentCheckbox @bind-Value="ProdutoModel.Bebida" Label="É uma bebida?" />
             </div>

             <div class="campo-formulario">
                 <label for="Imagem">Selecione uma imagem</label>
                 <InputFile OnChange="@SelectFile" />
             </div>
         </EditForm>

         <FluentStack Style="display: flex; justify-content: space-between" HorizontalAlignment="HorizontalAlignment.Center">
             <a href="/produtos">
                 <FluentButton BackgroundColor="purple" Color="white">Voltar para listagem de produtos</FluentButton>
             </a>
             <FluentButton OnClick="@HandleValidSubmit" Appearance="Appearance.Accent">Salvar</FluentButton>
         </FluentStack>
     </div>


     <h1 class="FT"> Ficha Técnica</h1>

     @* Ficha tecnica *@
     @{
        if (ListaIngredientesFicha != null && ListaIngredientesFicha.Any())
        {


            <FluentStack Style="padding: 10px; display: flex;" HorizontalAlignment="HorizontalAlignment.Center" Width="60vw">
                <FluentCard Height="Auto" Style="padding: 10px;">
                    <FluentDivider />

                    <FluentDataGrid id="defaultGrid" Items="@ListaIngredientesFicha.AsQueryable()" ShowHover="true" TGridItem="IngredienteFichaTecnica">
                        <SelectColumn TGridItem="IngredienteFichaTecnica" SelectMode="DataGridSelectMode.Multiple" SelectFromEntireRow="true"
                                      @bind-SelectedItems="@SelectedItems" />

                        <PropertyColumn Width="300px" Property="@(p => EnumHelper.GetEnumDescription(p.Ingrediente))" Title="Ingredientes" />

                        <TemplateColumn Title="Quantidade" Width="10%">
                            <FluentNumberField @bind-Value="@context.Quantidade" TValue="int" />
                        </TemplateColumn>

                    </FluentDataGrid>
                </FluentCard>
            </FluentStack>

        }
    }
</div>

<Loading ExibeLoading="@sessaoUsuario._loading" />

@code {
    [Inject] private IProdutoService produtoService { get; set; }
    [Inject] private IFichaTecnicaService fichaTecnicaService { get; set; }
    [Inject] private IUploadService uploadService { get; set; }
    [Inject] private SessaoUsuario sessaoUsuario { get; set; }
    [SupplyParameterFromForm]
    private Produto ProdutoModel { get; set; } = new();
    private List<EnumItem<TipoUsuario>> TiposUsuario = new List<EnumItem<TipoUsuario>>();
    private List<IngredienteFichaTecnica> ListaIngredientesFicha = new();
    private List<Ingredientes> ListaIngredientes = new();
    public IEnumerable<IngredienteFichaTecnica> SelectedItems = new List<IngredienteFichaTecnica>();

    List<string> mensagens = new();
    public IBrowserFile Arquivo { get; set; }
    ArquivoUpload arquivoUpload = new();

    protected async override Task OnInitializedAsync()
    {
        await Task.Factory.StartNew(() =>
        {
            sessaoUsuario.IniciaLoading();
            TiposUsuario = EnumHelper.GetEnumItems<TipoUsuario>();
            ListaIngredientes = Enum.GetValues(typeof(Ingredientes)).Cast<Ingredientes>().ToList();
            foreach (var ingrediente in ListaIngredientes)
            {
                ListaIngredientesFicha.Add(new IngredienteFichaTecnica { Ingrediente = ingrediente, Quantidade = 0 });
            }
            sessaoUsuario.FinalizaLoading();
        });
    }

    private void SelectFile(InputFileChangeEventArgs e)
    {
        Arquivo = e.File;
    }

    private async void HandleValidSubmit()
    {
        sessaoUsuario.IniciaLoading();
        if (ProdutoModel != null)
        {
            if (Arquivo != null)
            {
                (int statusCode, string nomeArquivoMensagem) = await uploadService.ArquivoUploadAsync(Arquivo);
                if (statusCode == 1)
                {
                    ProdutoModel.NomeArquivoUpload = nomeArquivoMensagem;
                    FichaTecnica fichaTecnica = new FichaTecnica()
                        {
                            Ingredientes = ListaIngredientesFicha.Where(x => x.Quantidade > 0).ToList()
                        };
                    FichaTecnica fichaInserida = await fichaTecnicaService.InserirFichaTecnica(fichaTecnica);
                    ProdutoModel.FichaTecnicaId = fichaInserida.Id;
                    Produto produtoInserido = await produtoService.InserirProduto(ProdutoModel);
                    if (produtoInserido != null)
                    {
                        ToastService.ShowSuccess("Produto inserido com sucesso.");
                        _navigationManager.NavigateTo("/produtos");
                        await Task.Delay(3000);
                    }
                    else
                    {
                        ToastService.ShowError("Falha ao inserir produto.");
                        await Task.Delay(3000);
                    }
                }
                else
                {
                    ToastService.ShowError("Falha ao carregar imagem. Erro: " + nomeArquivoMensagem);
                    await Task.Delay(3000);
                }
            }
            else
            {
                ToastService.ShowError("Você precisa selecionar uma imagem.");
                await Task.Delay(3000);
            }
        }
        else
        {
            ToastService.ShowError("Falha ao inserir produto.");
            await Task.Delay(3000);
        }

        sessaoUsuario.FinalizaLoading();
    }

    private void OnTipoUsuarioChanged(string selectedValue)
    {
        sessaoUsuario.TipoUsuario = TiposUsuario.FirstOrDefault(item => item.Description == selectedValue)?.Value ?? sessaoUsuario.TipoUsuario;
    }
}