@page "/carrinho/"
@rendermode RenderMode.InteractiveServer

<style>
    .fluent-label {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 2;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .fluent-label-nome {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 1;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .text-field {
        width: 100%;
    }

    .width-maximo {
        width: 100%;
    }

    .validation-message {
        color: red; /* Defina a cor que desejar */
        font-size: 14px; /* Ajuste o tamanho da fonte, se necessário */
    }

</style>

<PageTitle>Página inicial</PageTitle>

@{
    if (produtosItens.Any())
    {
        <FluentStack HorizontalAlignment="HorizontalAlignment.Center">
            <FluentCard Width="80%" Height="92vh" Style="display: flex; flex-wrap: wrap; gap: 10px;">
                <FluentWizard StepperPosition="@(StepperPosition.Top)"
                              StepSequence="@StepSequence"
                              DisplayStepNumber="@(WizardStepStatus.Current | WizardStepStatus.Next)"
                              Border="WizardBorder.Outside"
                              StepTitleHiddenWhen="@GridItemHidden.XsAndDown"
                              Height="88vh"
                              OnFinish="@OnFinishedAsync">
                    <Steps>
                        <FluentWizardStep Label="Confirmar itens">
                            <FluentStack HorizontalAlignment="HorizontalAlignment.Center" Style="height: 60vh; overflow-y: auto">
                                <FluentStack Width="100%" Style="display: flex; flex-wrap: wrap; gap: 10px;">
                                    @{
                                        if (produtosItens != null && produtosItens.Any())
                                        {
                                            foreach (ProdutoItemDTO produtoItem in produtosItens)
                                            {
                                                <FluentStack Style="display:flex; flex-direction: column">
                                                    <FluentStack Width="100%" Style="height 10vh;">
                                                        <FluentCard Style="padding: 0;" Width="40%" Height="100%">
                                                            <img src="@produtoItem.NomeArquivoUpload" style="object-fit: cover; height: 20vh; width: 100%" />
                                                        </FluentCard>
                                                        <FluentStack Style="display:flex; flex-direction: column" Width="100%">
                                                            <FluentStack Style="justify-content: space-between">
                                                                <FluentLabel Typo="Typography.H1" Class="fluent-label-nome">@produtoItem.Nome</FluentLabel>
                                                                    <FluentButton OnClick="() => AbreDialogExclusao(produtoItem)" BackgroundColor="transparent"> <FluentIcon Color="Color.Error" Value="@(new Icons.Regular.Size24.Dismiss())" /></FluentButton>
                                                                </FluentStack>
                                                                <FluentStack Style="display:flex; flex-direction: column" Width="90%">
                                                                    <FluentLabel Typo="Typography.Body" Class="fluent-label">@produtoItem.Descricao</FluentLabel>
                                                                    <FluentStack>
                                                                        <FluentStack Style="display: flex; flex-direction: column;" Width="100%" HorizontalAlignment="HorizontalAlignment.Left">
                                                                            <FluentStack>
                                                                                <FluentLabel Typo="Typography.H3" Style="margin-top: 3px">Qtd:</FluentLabel>
                                                                                <FluentNumberField Value="produtoItem.Quantidade" ValueChanged="@(v => OnQuantidadeChanged(v, produtoItem))" TValue="int" Size="1" Min="0"></FluentNumberField>
                                                                                <FluentLabel Typo="Typography.H3" Style="margin-top: 3px">X</FluentLabel>
                                                                                <FluentLabel Typo="Typography.H2" Style="color: limegreen">R$ @produtoItem.Preco</FluentLabel>
                                                                            </FluentStack>
                                                                        </FluentStack>
                                                                        <FluentStack Style="margin-top: 3px" HorizontalAlignment="HorizontalAlignment.Right">
                                                                            <FluentLabel Typo="Typography.H2">Total item:</FluentLabel>
                                                                            <FluentLabel Typo="Typography.H2">R$ @produtoItem.ValorTotal</FluentLabel>
                                                                        </FluentStack>
                                                                    </FluentStack>
                                                                    <FluentStack>
                                                                        <FluentTextArea Appearance="FluentInputAppearance.Filled" Class="width-maximo" Placeholder="Observações..." Name="Observações" Rows=3 @bind-Value="produtoItem.Observacoes"></FluentTextArea>
                                                                    </FluentStack>
                                                                </FluentStack>
                                                            </FluentStack>

                                                        </FluentStack>
                                                        <FluentDivider Style="background-color: black; width: 100%; height: 1.5px" />
                                                    </FluentStack>
                                            }
                                        }
                                        else
                                        {
                                            <FluentLabel Typo="Typography.H2">Não há registros cadastrados.</FluentLabel>
                                        }
                                    }
                                </FluentStack>
                            </FluentStack>
                            <FluentDivider Style="background-color: black; width: 100%; height: 2px" />
                            <FluentStack Width="100%" Style="height: 8vh;" VerticalAlignment="VerticalAlignment.Center">
                                <FluentStack Style="margin-top: 10px; display:flex; flex-direction: column" HorizontalAlignment="HorizontalAlignment.Right" VerticalAlignment="VerticalAlignment.Center">
                                    <FluentStack HorizontalAlignment="HorizontalAlignment.Right" VerticalAlignment="VerticalAlignment.Center">
                                        <FluentLabel Typo="Typography.H4">Total do pedido:</FluentLabel>
                                        <FluentLabel Typo="Typography.H3" Style="color: limegreen">R$ @TotalPedido</FluentLabel>
                                        </FluentStack>
                                    </FluentStack>
                                </FluentStack>
                            </FluentWizardStep>
                            <FluentWizardStep Label="Endereço de entrega">
                                <EditForm style="width: 100%; display: flex; flex-direction: column; justify-content: center" Model="@Pedido" FormName="Pedido_fluent_entry" novalidate>
                                    <DataAnnotationsValidator />
                                    <FluentStack Style="margin-top: 5vh" HorizontalAlignment="HorizontalAlignment.Center">
                                        <FluentStack Width="70%" Orientation="Orientation.Vertical">
                                            <FluentTextField Appearance="FluentInputAppearance.Filled" Class="text-field" Immediate Placeholder="Informe seu nome" Name="Nome" @bind-Value="Pedido.Cliente" Label="Nome" Required></FluentTextField>
                                         <ValidationMessage For="@(() => Pedido.Cliente)" />
                                         <FluentTextField Appearance="FluentInputAppearance.Filled" Class="text-field" Immediate Placeholder="Rua" Name="Rua" @bind-Value="Pedido.Rua" Label="Rua" Required></FluentTextField>
                                         <ValidationMessage For="@(() => Pedido.Rua)" />
                                         <FluentCombobox Appearance="Appearance.Filled" TOption="string" Placeholder="Selecione o seu bairro..." ValueChanged="@(e => OnBairroChanged(e))" Label="Bairro" Autofocus="true" Height="200px" Required>
                                         @foreach (var item in BairroItems)
                                            {
                                                <FluentOption Value="@(EnumHelper.GetEnumDescription(item.Value))">@item.Description</FluentOption>
                                            }
                                        </FluentCombobox>
                                        <ValidationMessage For="@(() => Pedido.Bairro)" />
                                        <FluentCombobox Appearance="Appearance.Filled" Disabled="@DesabilitaComboFormaPagamento()" TOption="string" Placeholder="Selecione a forma de entrega" ValueChanged="@(e => OnFormaEntregaChanged(e))" Label="Forma de entrega" Autofocus="true" Height="200px" Required>
                                         @foreach (var item in FormaEntregaItems)
                                            {
                                                <FluentOption Value="@(EnumHelper.GetEnumDescription(item.Value))">@item.Description</FluentOption>
                                            }
                                        </FluentCombobox>
                                        <ValidationMessage For="@(() => Pedido.FormaEntrega)" />
                                        @{
                                            if (Pedido.FormaEntrega == FormaEntrega.Entrega)
                                            {
                                                <FluentLabel Typo="Typography.H6">Taxa de entrega para @EnumHelper.GetEnumDescription(Pedido.Bairro): @DefineTaxaEntrega(Pedido.Bairro).ToString("C")</FluentLabel>

                                            }
                                        }
                                        <FluentTextArea Appearance="FluentInputAppearance.Filled" Class="width-maximo" Placeholder="Complemento..." Name="Complemento" Rows=5 @bind-Value="Pedido.Complemento" Label="Complemento"></FluentTextArea>
                                    </FluentStack>
                                </FluentStack>
                            </EditForm>
                        </FluentWizardStep>
                        <FluentWizardStep Label="Forma de pagamento">
                            <EditForm style="width: 100%; display: flex; flex-direction: column; justify-content: center" Model="@Pedido" FormName="Pedido_fluent_entry" novalidate>
                                <DataAnnotationsValidator />
                                <FluentStack HorizontalAlignment="HorizontalAlignment.Center">
                                    <FluentStack Width="70%" Orientation="Orientation.Vertical">
                                        <FluentLabel Typo="Typography.H4">Informações sobre a entrega</FluentLabel>
                                        <FluentTextField Appearance="FluentInputAppearance.Filled" Disabled Class="text-field" Placeholder="Informe seu nome" Name="Nome" @bind-Value="Pedido.Cliente" Label="Nome" Required></FluentTextField>
                                         <FluentTextField Appearance="FluentInputAppearance.Filled" Disabled Class="text-field" Placeholder="Rua" Name="Rua" @bind-Value="Pedido.Rua" Label="Rua" Required></FluentTextField>
                                         <FluentCombobox Appearance="Appearance.Filled" TOption="string" Disabled Placeholder="Selecione o seu bairro..." Value="@EnumHelper.GetEnumDescription(Pedido.Bairro)" ValueChanged="@(e => OnBairroChanged(e))" Label="Bairro" Autofocus="true" Height="200px" Required>
                                     </FluentCombobox>
                                     <FluentCombobox TOption="string" Disabled Placeholder="Selecione a forma de entrega" Value="@EnumHelper.GetEnumDescription(Pedido.FormaEntrega)" ValueChanged="@(e => OnFormaEntregaChanged(e))" Label="Forma de entrega" Autofocus="true" Height="200px" Required>
                                     </FluentCombobox>
                                     <FluentTextArea Disabled Appearance="FluentInputAppearance.Filled" Class="width-maximo" Placeholder="Complemento..." Name="Complemento" Rows=5 @bind-Value="Pedido.Complemento" Label="Complemento"></FluentTextArea>
                                         <FluentLabel Typo="Typography.H4">Forma de pagamento</FluentLabel>
                                         <ValidationMessage For="@(() => Pedido.FormaPagamento)" />
                                         <FluentCombobox Appearance="Appearance.Filled" TOption="string" Placeholder="Informe a forma de pagamento" ValueChanged="@(e => OnFormaPagamentoChanged(e))" Label="Método de pagamento" Autofocus="true" Height="200px" Width="55%" Required>
                                         @foreach (var item in FormaPagamentoItems)
                                            {
                                                <FluentOption Value="@(EnumHelper.GetEnumDescription(item.Value))">@item.Description</FluentOption>
                                            }
                                        </FluentCombobox>
                                        <FluentStack Style="gap: 2px" HorizontalAlignment="HorizontalAlignment.Left" Width="50%">
                                            <img src="/uploads/visa.png" style="object-fit: contain; height: 4vh; width: 20%" />
                                            <img src="/uploads/mastercard.png" style="object-fit: contain; height: 4vh; width: 20%" />
                                            <img src="/uploads/elo.png" style="object-fit: contain; height: 4vh; width: 20%" />
                                            <img src="/uploads/hipercard.png" style="object-fit: contain; height: 4vh; width: 20%" />
                                            <img src="/uploads/bancobrasil.png" style="object-fit: contain; height: 4vh; width: 20%" />
                                            <img src="/uploads/pix.png" style="object-fit: contain; height: 4vh; width: 20%" />
                                        </FluentStack>
                                    </FluentStack>
                                </FluentStack>
                            </EditForm>
                        </FluentWizardStep>
                    </Steps>
                </FluentWizard>
            </FluentCard>
        </FluentStack>
    }
    else
    {
        <FluentLabel Typo="Typography.H2">O carrinho está vazio.</FluentLabel>
    }
}


<FluentDialog Hidden="bDesabilitaDialogSucesso">
    <FluentDialogHeader>
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentIcon Value="@(new Icons.Regular.Size32.CheckmarkCircle())" Color="@Color.Success" />
            <FluentLabel Typo="Typography.H3">Seu pedido foi confirmado.</FluentLabel>
        </FluentStack>
    </FluentDialogHeader>
    <FluentDialogBody>
        <FluentLabel Typo="Typography.Subject">O número do seu pedido é @Pedido.Id.</FluentLabel>
            @{
            if (Pedido.FormaEntrega == FormaEntrega.Entrega)
            {
                <FluentLabel Typo="Typography.Subject">Valor do pedido: @Pedido.Valor.ToString("C")</FluentLabel>
                <FluentLabel Typo="Typography.Subject">Taxa de entrega: @Pedido.TaxaEntrega.ToString("C")</FluentLabel>
            }
        }
        <FluentLabel Typo="Typography.Subject">Valor total: @TotalPedido.ToString("C")</FluentLabel>
        </FluentDialogBody>
        <FluentDialogFooter>
            <FluentButton Style="border-width: 0px" BackgroundColor="green" Color="white" OnClick="HandleOkClick">OK</FluentButton>
        </FluentDialogFooter>
    </FluentDialog>

    @code {
    [Inject] private SessaoUsuario sessaoUsuario { get; set; }
    [Inject] private IProdutoService ProdutoService { get; set; }
    [Inject] private IPedidoService PedidoService { get; set; }
    [Inject] public IValidator<Pedido> Validator { get; set; }
    [Inject] public IMapper mapper { get; set; }
    private List<EnumItem<Bairro>> BairroItems;
    private List<EnumItem<FormaEntrega>> FormaEntregaItems;
    private List<EnumItem<FormaPagamento>> FormaPagamentoItems;
    private List<EnumItem<TipoUsuario>> TiposUsuario = new List<EnumItem<TipoUsuario>>();
    public List<ProdutoItemDTO> produtosItens = new();
    public Produto Produto = new();
    public Pedido Pedido = new();
    public WizardStepSequence StepSequence = WizardStepSequence.Linear;
    public decimal Numero { get; set; }
    public decimal TotalPedido { get; set; }
    public int IdProduto { get; set; }
    private bool bDesabilitaDialogSucesso = true;

    protected async override Task OnInitializedAsync()
    {
        BairroItems = EnumHelper.GetEnumItems<Bairro>();
        FormaEntregaItems = EnumHelper.GetEnumItems<FormaEntrega>();
        FormaPagamentoItems = EnumHelper.GetEnumItems<FormaPagamento>();
        produtosItens = sessaoUsuario.ProdutosItem;
        produtosItens.ToList().ForEach(item => TotalPedido += item.Quantidade * item.Preco);
        TiposUsuario = EnumHelper.GetEnumItems<TipoUsuario>();
        AtualizaTotal();
    }

    private void OnQuantidadeChanged(int novaQuantidade, ProdutoItemDTO produtoItem)
    {
        produtoItem.Quantidade = novaQuantidade;
        AtualizaTotal();
    }

    private void AtualizaTotal()
    {
        TotalPedido = 0;
        produtosItens.ToList().ForEach(item => item.ValorTotal = item.Quantidade * item.Preco);
        produtosItens.ToList().ForEach(item => TotalPedido += item.ValorTotal);
    }

    private void OnBairroChanged(string selectedValue)
    {
        Pedido.Bairro = BairroItems.FirstOrDefault(item => item.Description == selectedValue)?.Value ?? Pedido.Bairro;
    }

    private void OnFormaEntregaChanged(string selectedValue)
    {
        Pedido.FormaEntrega = FormaEntregaItems.FirstOrDefault(item => item.Description == selectedValue)?.Value ?? Pedido.FormaEntrega;
    }

    private void OnFormaPagamentoChanged(string selectedValue)
    {
        Pedido.FormaPagamento = FormaPagamentoItems.FirstOrDefault(item => item.Description == selectedValue)?.Value ?? Pedido.FormaPagamento;
    }

    private decimal DefineTaxaEntrega(Bairro bairro)
    {
        // Pega o índice do bairro no enum
        int bairroIndex = (int)bairro;

        // A cada 3 bairros, a taxa aumenta em 1 real, começando com 5 reais
        decimal taxaBase = 5;
        decimal taxa = taxaBase + (bairroIndex / 3);
        Pedido.TaxaEntrega = taxa;
        return taxa;
    }

    private bool DesabilitaComboFormaPagamento()
    {
        return (int)Pedido.Bairro == 0;
    }

    private async Task AbreDialogExclusao(ProdutoItemDTO produtoItem)
    {
        var dialogReference = await DialogService.ShowConfirmationAsync("Deseja mesmo excluir este item?", "Sim", "Não", "Confirmação");
        var result = await dialogReference.Result;

        if (!result.Cancelled)
        {
            produtosItens.Remove(produtoItem); // Remove o item da listagem
            if (!produtosItens.Any())
            {
                ToastService.ShowSuccess("Seu carrinho não possui mais itens.");
                _navigationManager.NavigateTo("/");
            }
            else
            {
                ToastService.ShowSuccess("Item excluído com sucesso.");
            }
        }
    }


    async Task OnFinishedAsync()
    {
        ValidationResult validationResult = await Validator.ValidateAsync(Pedido);
        if (validationResult.IsValid)
        {
            Pedido.Valor = TotalPedido;
            foreach (var item in produtosItens)
            {
                Pedido.Itens.Add(new PedidoItem
                    {
                        ProdutoId = item.Id,
                        Quantidade = item.Quantidade,
                        Observacoes = item.Observacoes
                    });
            }
            TotalPedido += Pedido.TaxaEntrega;
            string? cpf = await _localStorage.GetItemAsync<string>("CPF");
            Pedido.DadosInclusao(cpf ?? "");
            Pedido pedidoCriado = await PedidoService.InserirPedido(Pedido);
            if (pedidoCriado is null)
            {
                await DialogService.ShowErrorAsync("Revise as informações e tente novamente. Caso o erro continue, contate a equipe de suporte", "Erro ao salvar pedido.");
            }
            else
            {
                bDesabilitaDialogSucesso = false;
                sessaoUsuario.ProdutosItem.Clear();
            }
        }
        else
        {
            var erros = "Ocorreram erros de validação:";
            foreach (var error in validationResult.Errors)
            {
                erros += $"{error.ErrorMessage}\n";
            }

            await DialogService.ShowErrorAsync(erros, "Ops, tem algo errado com seu pedido.");
        }
    }

    private void HandleOkClick()
    {
        bDesabilitaDialogSucesso = true;
        _navigationManager.NavigateTo("/"); // Redireciona o usuário após clicar em Ok
    }

    private void OnTipoUsuarioChanged(string selectedValue)
    {
        sessaoUsuario.TipoUsuario = TiposUsuario.FirstOrDefault(item => item.Description == selectedValue)?.Value ?? sessaoUsuario.TipoUsuario;
    }
}
