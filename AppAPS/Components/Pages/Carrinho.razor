@page "/carrinho/"
@using AppAPS.DTOs
@using AppAPS.Entities
@using AppAPS.Interfaces
@using AppAPS.Services.Model
@using AutoMapper
@inject IDialogService DialogService
@rendermode RenderMode.InteractiveServer
@using FluentValidation
@using FluentValidation.Results

<style>
    .fluent-label {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 2;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .fluent-label-nome {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 1;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .text-field {
        width: 100%;
    }

    .width-maximo {
        width: 100%;
    }

    .validation-message {
        color: red; /* Defina a cor que desejar */
        font-size: 14px; /* Ajuste o tamanho da fonte, se necessário */
    }

</style>

<PageTitle>Página inicial</PageTitle>



<FluentStack HorizontalAlignment="HorizontalAlignment.Center">
    <FluentCard Width="80%" Height="92vh" Style="display: flex; flex-wrap: wrap; gap: 10px;">
        <FluentWizard StepperPosition="@(StepperPosition.Top)"
                      StepSequence="@StepSequence"
                      DisplayStepNumber="@(WizardStepStatus.Current | WizardStepStatus.Next)"
                      Border="WizardBorder.Outside"
                      StepTitleHiddenWhen="@GridItemHidden.XsAndDown"
                      Height="88vh"
                      OnFinish="@OnFinishedAsync">
            <Steps>

                <FluentWizardStep Label="Confirmar itens"
                                  OnChange="@OnStepChange">
                    <FluentStack HorizontalAlignment="HorizontalAlignment.Center" Style="height: 60vh; overflow-y: auto">
                        <FluentStack Width="100%" Style="display: flex; flex-wrap: wrap; gap: 10px;">
                            @{
                                if (produtosItens != null && produtosItens.Any())
                                {
                                    foreach (ProdutoItemDTO produtoItem in produtosItens)
                                    {
                                        <FluentStack Style="display:flex; flex-direction: column;">
                                            <FluentStack Width="80%" Style="height 10vh;">
                                                <FluentCard Style="padding: 0;" Width="40%" Height="100%">
                                                    <img src="@produtoItem.NomeArquivoUpload" style="object-fit: cover; height: 20vh; width: 100%" />
                                                </FluentCard>
                                                <FluentStack Style="display:flex; flex-direction: column">
                                                    <FluentLabel Typo="Typography.H2" Class="fluent-label-nome">@produtoItem.Nome</FluentLabel>
                                                    <FluentLabel Typo="Typography.Body" Class="fluent-label">@produtoItem.Descricao</FluentLabel>
                                                    <FluentStack>
                                                        <FluentStack HorizontalAlignment="HorizontalAlignment.Left">
                                                            <FluentLabel Typo="Typography.H5" Style="margin-top: 3px">Qtd:</FluentLabel>
                                                            <FluentNumberField Value="produtoItem.Quantidade" ValueChanged="@(v => OnQuantidadeChanged(v, produtoItem))" TValue="int" Size="1" Min="0"></FluentNumberField>
                                                            <FluentLabel Typo="Typography.H5" Style="margin-top: 3px">X</FluentLabel>
                                                            <FluentLabel Typo="Typography.H4" Style="color: limegreen">R$ @produtoItem.Preco</FluentLabel>
                                                        </FluentStack>
                                                        <FluentStack Style="margin-top: 3px" HorizontalAlignment="HorizontalAlignment.Right">
                                                            <FluentLabel Typo="Typography.H5">Total item:</FluentLabel>
                                                            <FluentLabel Typo="Typography.H5">R$ @produtoItem.ValorTotal</FluentLabel>
                                                        </FluentStack>
                                                    </FluentStack>
                                                </FluentStack>
                                            </FluentStack>
                                            <FluentDivider Style="background-color: black; width: 100%; height: 1.5px" />
                                        </FluentStack>
                                    }
                                }
                                else
                                {
                                    <FluentLabel Typo="Typography.H2">Não há registros cadastrados.</FluentLabel>
                                }
                            }
                        </FluentStack>
                    </FluentStack>
                    <FluentDivider Style="background-color: black; width: 100%; height: 2px" />
                    <FluentStack Width="100%" Style="height: 8vh;" VerticalAlignment="VerticalAlignment.Center">
                        <FluentStack Style="margin-top: 10px; display:flex; flex-direction: column" HorizontalAlignment="HorizontalAlignment.Right" VerticalAlignment="VerticalAlignment.Center">
                            <FluentStack HorizontalAlignment="HorizontalAlignment.Right" VerticalAlignment="VerticalAlignment.Center">
                                <FluentLabel Typo="Typography.H4">Total do pedido:</FluentLabel>
                                <FluentLabel Typo="Typography.H3" Style="color: limegreen">R$ @TotalPedido</FluentLabel>
                            </FluentStack>
                        </FluentStack>
                    </FluentStack>
                </FluentWizardStep>
                <FluentWizardStep Label="Endereço de entrega"
                                  OnChange="@OnStepChange">
                    <EditForm style="width: 100%; display: flex; flex-direction: column; justify-content: center" Model="@Pedido" FormName="Pedido_fluent_entry" novalidate>
                        <DataAnnotationsValidator />
                        <FluentStack Style="margin-top: 5vh" HorizontalAlignment="HorizontalAlignment.Center">
                            <FluentStack Width="70%" Orientation="Orientation.Vertical">
                                <FluentTextField Appearance="FluentInputAppearance.Outline" Class="text-field" Immediate Placeholder="Informe seu nome" Name="Nome" @bind-Value="Pedido.Cliente" Label="Nome" Required></FluentTextField>
                                <ValidationMessage For="@(() => Pedido.Cliente)" />
                                <FluentTextField Appearance="FluentInputAppearance.Outline" Class="text-field" Immediate Placeholder="Rua" Name="Rua" @bind-Value="Pedido.Rua" Label="Rua" Required></FluentTextField>
                                <ValidationMessage For="@(() => Pedido.Rua)" />
                                <FluentCombobox TOption="string" Placeholder="Selecione o seu bairro..." ValueChanged="@(e => OnBairroChanged(e))" Label="Bairro" Autofocus="true" Height="200px" Required>
                                    @foreach (var item in BairroItems)
                                    {
                                        <FluentOption Value="@(EnumHelper.GetEnumDescription(item.Value))">@item.Description</FluentOption>
                                    }
                                </FluentCombobox>
                                <ValidationMessage For="@(() => Pedido.Bairro)" />
                                <FluentCombobox TOption="string" Placeholder="Selecione a forma de entrega" ValueChanged="@(e => OnFormaEntregaChanged(e))" Label="Forma de entrega" Autofocus="true" Height="200px" Required>
                                    @foreach (var item in FormaEntregaItems)
                                    {
                                        <FluentOption Value="@(EnumHelper.GetEnumDescription(item.Value))">@item.Description</FluentOption>
                                    }
                                </FluentCombobox>
                                <ValidationMessage For="@(() => Pedido.FormaEntrega)" />
                                <FluentTextArea Appearance="FluentInputAppearance.Outline" Class="width-maximo" Placeholder="Observações..." Name="Observações" Rows=5 @bind-Value="Pedido.Observacoes" Label="Observações"></FluentTextArea>
                            </FluentStack>
                        </FluentStack>
                    </EditForm>
                </FluentWizardStep>
                <FluentWizardStep Label="Forma de pagamento"
                                  OnChange="@OnStepChange">
                    <EditForm style="width: 100%; display: flex; flex-direction: column; justify-content: center" Model="@Pedido" FormName="Pedido_fluent_entry" novalidate>
                        <DataAnnotationsValidator />
                        <FluentStack HorizontalAlignment="HorizontalAlignment.Center">
                            <FluentStack Width="70%" Orientation="Orientation.Vertical">
                                <FluentLabel Typo="Typography.H4">Informações sobre a entrega</FluentLabel>
                                <FluentTextField Appearance="FluentInputAppearance.Filled" Disabled Class="text-field" Placeholder="Informe seu nome" Name="Nome" @bind-Value="Pedido.Cliente" Label="Nome" Required></FluentTextField>
                                <FluentTextField Appearance="FluentInputAppearance.Filled" Disabled Class="text-field" Placeholder="Rua" Name="Rua" @bind-Value="Pedido.Rua" Label="Rua" Required></FluentTextField>
                                <FluentCombobox TOption="string" Disabled Placeholder="Selecione o seu bairro..." Value="@EnumHelper.GetEnumDescription(Pedido.Bairro)" ValueChanged="@(e => OnBairroChanged(e))" Label="Bairro" Autofocus="true" Height="200px" Required>
                                </FluentCombobox>
                                <FluentCombobox TOption="string" Disabled Placeholder="Selecione a forma de entrega" Value="@EnumHelper.GetEnumDescription(Pedido.FormaEntrega)" ValueChanged="@(e => OnFormaEntregaChanged(e))" Label="Forma de entrega" Autofocus="true" Height="200px" Required>
                                </FluentCombobox>
                                <FluentTextArea Disabled Appearance="FluentInputAppearance.Filled" Class="width-maximo" Placeholder="Observações..." Name="Observações" Rows=5 @bind-Value="Pedido.Observacoes" Label="Observações"></FluentTextArea>
                                <FluentLabel Typo="Typography.H4">Forma de pagamento</FluentLabel>
                                <ValidationMessage For="@(() => Pedido.FormaPagamento)" />
                                <FluentCombobox TOption="string" Placeholder="Informe a forma de pagamento" ValueChanged="@(e => OnFormaPagamentoChanged(e))" Label="Método de pagamento" Autofocus="true" Height="200px" Required>
                                    @foreach (var item in FormaPagamentoItems)
                                    {
                                        <FluentOption Value="@(EnumHelper.GetEnumDescription(item.Value))">@item.Description</FluentOption>
                                    }
                                </FluentCombobox>
                            </FluentStack>
                        </FluentStack>
                    </EditForm>
                </FluentWizardStep>
            </Steps>
        </FluentWizard>
    </FluentCard>
</FluentStack>

@code {
    [Inject] private SessaoUsuario sessaoUsuario { get; set; }

    public Produto Produto = new();
    public Pedido Pedido = new();
    public List<ProdutoItemDTO> produtosItens = new();
    public decimal Numero { get; set; }
    public int IdProduto { get; set; }
    public decimal TotalPedido { get; set; }
    private List<EnumItem<Bairro>> BairroItems;
    private List<EnumItem<FormaEntrega>> FormaEntregaItems;
    private List<EnumItem<FormaPagamento>> FormaPagamentoItems;
    [Inject] public IValidator<Pedido> Validator { get; set; }
    private string? SelectedBairro = "";
    private string? SelectedFormaEntrega = "";
    private string? SelectedFormaPagamento = "";

    protected async override Task OnInitializedAsync()
    {
        BairroItems = EnumHelper.GetEnumItems<Bairro>();
        FormaEntregaItems = EnumHelper.GetEnumItems<FormaEntrega>();
        FormaPagamentoItems = EnumHelper.GetEnumItems<FormaPagamento>();
        produtosItens = sessaoUsuario.ProdutosItem;
        produtosItens.ToList().ForEach(item => TotalPedido += item.Quantidade * item.Preco);
        AtualizaTotal();
    }

    private void OnQuantidadeChanged(int novaQuantidade, ProdutoItemDTO produtoItem)
    {
        produtoItem.Quantidade = novaQuantidade;
        AtualizaTotal();
    }

    private void AtualizaTotal()
    {
        TotalPedido = 0;
        produtosItens.ToList().ForEach(item => item.ValorTotal = item.Quantidade * item.Preco);
        produtosItens.ToList().ForEach(item => TotalPedido += item.ValorTotal);
    }

    private void OnBairroChanged(string selectedValue)
    {
        Pedido.Bairro = BairroItems.FirstOrDefault(item => item.Description == selectedValue)?.Value ?? Pedido.Bairro;
    }

    private void OnFormaEntregaChanged(string selectedValue)
    {
        Pedido.FormaEntrega = FormaEntregaItems.FirstOrDefault(item => item.Description == selectedValue)?.Value ?? Pedido.FormaEntrega;
    }

    private void OnFormaPagamentoChanged(string selectedValue)
    {
        Pedido.FormaPagamento = FormaPagamentoItems.FirstOrDefault(item => item.Description == selectedValue)?.Value ?? Pedido.FormaPagamento;
    }

    WizardStepSequence StepSequence = WizardStepSequence.Linear;

    void OnStepChange(FluentWizardStepChangeEventArgs e)
    {
    }

    async Task OnFinishedAsync()
    {
        ValidationResult validationResult = await Validator.ValidateAsync(Pedido);
        if (validationResult.IsValid)
        {
            Pedido.DadosInclusao();
            sessaoUsuario.Pedidos.Add(Pedido);
            await DialogService.ShowSuccessAsync("O número do seu pedido é " + Pedido.Id, "Seu pedido foi finalizado.");
        }
        else
        {
            var erros = "Ocorreram erros de validação:";
            foreach (var error in validationResult.Errors)
            {
                erros += $"{error.ErrorMessage}\n";
            }

            await DialogService.ShowErrorAsync(erros, "Ops, tem algo errado com seu pedido.");
        }
    }
}
