@using AppAPS.DTOs
@using AppAPS.Entities
@using AppAPS.Services.Model
@rendermode RenderMode.InteractiveServer

<style>
    .custom-botao {
        height: 70px;
        padding: 5px;
        border-radius: 7px;
        gap: 0;
    }

    .custom-botao-cliente {
        height: 70px;
        padding: 5px;
        border-radius: 7px;
        pointer-events: none;
        gap: 0;
    }

    .cor-botao-confirmado {
        background-color: palevioletred;
    }

    .cor-botao-em-preparo {
        background-color: coral;
    }

    .cor-botao-pronto-entrega {
        background-color: goldenrod;
    }

    .cor-botao-em-transito {
        background-color: blue;
    }

    .cor-botao-finalizado {
        background-color: green;
    }

    .custom-botao:hover {
        opacity: 0.5;
    }

    .disabled-stack {
        pointer-events: none; /* Desabilita todas as interações */
        opacity: 0.4; /* Reduz a opacidade para indicar que está desabilitado */
    }
</style>

<FluentStack VerticalAlignment="VerticalAlignment.Center">
    <FluentStack @onclick="() => HandleClick(Pedido, StatusPedido.Confirmado)" Class="@AtualizaClasses(StatusPedido.Confirmado)" Style="display: flex; flex-direction: column; align-items: center;" Width="90px">
        <FluentIcon Color="Color.Lightweight" Width="30px" Value="@(new Icons.Filled.Size24.AlertOn())"></FluentIcon>
        <FluentLabel Color="Color.Lightweight">Confirmado</FluentLabel>
    </FluentStack>

    <FluentDivider Orientation="Orientation.Horizontal" Style="height: 2px; width: 20px; background-color: lightgray;" />
    <FluentIcon Value="@DefineIconeIntermediario(1, Pedido.Status)"></FluentIcon>
    <FluentDivider Orientation="Orientation.Horizontal" Style="height: 2px; width: 20px; background-color: lightgray;" />

    <FluentStack @onclick="() => HandleClick(Pedido, StatusPedido.EmPreparo)" Class="@AtualizaClasses(StatusPedido.EmPreparo)" Style="display: flex; flex-direction: column; align-items: center;" Width="90px">
        <FluentIcon Color="Color.Lightweight" Width="30px" Value="@(new Icons.Filled.Size24.FoodPizza())"></FluentIcon>
        <FluentLabel Color="Color.Lightweight">Em preparo</FluentLabel>
    </FluentStack>

    <FluentDivider Orientation="Orientation.Horizontal" Style="height: 2px; width: 20px; background-color: lightgray;" />
    <FluentIcon Value="DefineIconeIntermediario(2, Pedido.Status)"></FluentIcon>
    <FluentDivider Orientation="Orientation.Horizontal" Style="height: 2px; width: 20px; background-color: lightgray;" />

    <FluentStack @onclick="() => HandleClick(Pedido, StatusPedido.ProntoParaEntrega)" Class="@AtualizaClasses(StatusPedido.ProntoParaEntrega)" Style="display: flex; flex-direction: column; align-items: center;" Width="100px">
        <FluentIcon Color="Color.Lightweight" Width="30px" Value="@(new Icons.Filled.Size24.ClockPause())"></FluentIcon>
        <FluentLabel Style="font-size: small" Color="Color.Lightweight">Pronto entrega</FluentLabel>
    </FluentStack>

    <FluentDivider Orientation="Orientation.Horizontal" Style="height: 2px; width: 20px; background-color: lightgray;" />
    <FluentIcon Value="DefineIconeIntermediario(3, Pedido.Status)"></FluentIcon>
    <FluentDivider Orientation="Orientation.Horizontal" Style="height: 2px; width: 20px; background-color: lightgray;" />

    <FluentStack @onclick="() => HandleClick(Pedido, StatusPedido.EmTransito)" Class="@AtualizaClasses(StatusPedido.EmTransito)" Style="display: flex; flex-direction: column; align-items: center;" Width="90px">
        <FluentIcon Color="Color.Lightweight" Width="30px" Value="@(new Icons.Filled.Size24.VehicleCarProfileLtrClock())"></FluentIcon>
        <FluentLabel Style="font-size: small" Color="Color.Lightweight">Em trânsito</FluentLabel>
    </FluentStack>

    <FluentDivider Orientation="Orientation.Horizontal" Style="height: 2px; width: 20px; background-color: lightgray;" />
    <FluentIcon Value="DefineIconeIntermediario(4, Pedido.Status)"></FluentIcon>
    <FluentDivider Orientation="Orientation.Horizontal" Style="height: 2px; width: 20px; background-color: lightgray;" />

    <FluentStack @onclick="() => HandleClick(Pedido, StatusPedido.Finalizado)" Class="@AtualizaClasses(StatusPedido.Finalizado)" Style="display: flex; flex-direction: column; align-items: center;" Width="90px">
        <FluentIcon Color="Color.Lightweight" Width="30px" Value="@(new Icons.Filled.Size24.CheckmarkStarburst())"></FluentIcon>
        <FluentLabel Style="font-size: small" Color="Color.Lightweight">Finalizado</FluentLabel>
    </FluentStack>
</FluentStack>

@code {
    [Parameter] public Pedido Pedido { get; set; }
    [Parameter] public SessaoUsuario SessaoUsuario { get; set; }
    [Parameter] public EventCallback<PedidoStatusDTO> AtualizaStatus { get; set; }
    private bool DesabilitaBotaoConfirmado = true;
    private bool DesabilitaBotaoEmPreparo = true;
    private bool DesabilitaBotaoProntoParaEntrega = true;
    private bool DesabilitaBotaoEmTransito = true;
    private bool DesabilitaBotaoFinalizado = true;

    protected async override Task OnInitializedAsync()
    {
        AtualizaLayoutStatus(Pedido.Status);
    }

    private async void HandleClick(Pedido pedido, StatusPedido novoStatus)
    {
        if (SessaoUsuario.TipoUsuario != TipoUsuario.Cliente)
        {
            PedidoStatusDTO pedidoStatusDTO = new PedidoStatusDTO
                {
                    Pedido = pedido,
                    NovoStatus = novoStatus
                };
            await AtualizaStatus.InvokeAsync(pedidoStatusDTO);
            AtualizaLayoutStatus(novoStatus);
        }

        if(novoStatus == StatusPedido.Finalizado)
        {
            await DialogService.ShowSuccessAsync($"O pedido {Pedido.Id} foi finalizado", "Pedido finalizado.");
        }
    }

    private void AtualizaLayoutStatus(StatusPedido statusAtual)
    {
        switch (statusAtual)
        {
            case StatusPedido.Confirmado:
                DesabilitaBotaoEmPreparo = false;
                break;
            case StatusPedido.EmPreparo:
                DesabilitaBotaoEmPreparo = true;
                DesabilitaBotaoProntoParaEntrega = false;
                break;
            case StatusPedido.ProntoParaEntrega:
                DesabilitaBotaoProntoParaEntrega = true;
                DesabilitaBotaoEmTransito = false;
                break;
            case StatusPedido.EmTransito:
                DesabilitaBotaoEmTransito = true;
                DesabilitaBotaoFinalizado = false;
                break;
            case StatusPedido.Finalizado:
                DesabilitaBotaoFinalizado = true;
                break;
        }
    }

    private Icon DefineIconeIntermediario(int numeroIcone, StatusPedido statusAtual)
    {
        switch (numeroIcone)
        {
            case 1:
                if (statusAtual == StatusPedido.EmPreparo || statusAtual == StatusPedido.ProntoParaEntrega || statusAtual == StatusPedido.EmTransito || statusAtual == StatusPedido.Finalizado)
                    return new Icons.Filled.Size24.Checkmark();
                else
                    return new Icons.Filled.Size24.Clock();
            case 2:
                if (statusAtual == StatusPedido.ProntoParaEntrega || statusAtual == StatusPedido.EmTransito || statusAtual == StatusPedido.Finalizado)
                    return new Icons.Filled.Size24.Checkmark();
                else
                    return new Icons.Filled.Size24.Clock();
            case 3:
                if (statusAtual == StatusPedido.EmTransito || statusAtual == StatusPedido.Finalizado)
                    return new Icons.Filled.Size24.Checkmark();
                else
                    return new Icons.Filled.Size24.Clock();
            case 4:
                if (statusAtual == StatusPedido.Finalizado)
                    return new Icons.Filled.Size24.Checkmark();
                else
                    return new Icons.Filled.Size24.Clock();
            default:
                return new Icons.Filled.Size24.Clock();

        }
    }

    private string AtualizaClasses(StatusPedido status)
    {
        string classes = "";
        switch (status)
        {
            case StatusPedido.Confirmado:
                if (DesabilitaBotaoConfirmado)
                {
                    if (SessaoUsuario.TipoUsuario == TipoUsuario.Cliente)
                        classes = "disabled-stack custom-botao-cliente cor-botao-confirmado";
                    else
                        classes = "disabled-stack custom-botao cor-botao-confirmado";
                }
                else
                {
                    if (SessaoUsuario.TipoUsuario == TipoUsuario.Cliente)
                        classes = "custom-botao-cliente cor-botao-confirmado";
                    else
                        classes = "custom-botao cor-botao-confirmado";
                }
                break;
            case StatusPedido.EmPreparo:
                if (DesabilitaBotaoEmPreparo)
                {
                    if (SessaoUsuario.TipoUsuario == TipoUsuario.Cliente)
                        classes = "disabled-stack custom-botao-cliente cor-botao-em-preparo";
                    else
                        classes = "disabled-stack custom-botao cor-botao-em-preparo";
                }
                else
                {
                    if (SessaoUsuario.TipoUsuario == TipoUsuario.Cliente)
                        classes = "custom-botao-cliente cor-botao-em-preparo";
                    else
                        classes = "custom-botao cor-botao-em-preparo";
                }
                break;
            case StatusPedido.ProntoParaEntrega:
                if (DesabilitaBotaoProntoParaEntrega)
                {
                    if (SessaoUsuario.TipoUsuario == TipoUsuario.Cliente)
                        classes = "disabled-stack custom-botao-cliente cor-botao-pronto-entrega";
                    else
                        classes = "disabled-stack custom-botao cor-botao-pronto-entrega";
                }
                else
                {
                    if (SessaoUsuario.TipoUsuario == TipoUsuario.Cliente)
                        classes = "custom-botao-cliente cor-botao-pronto-entrega";
                    else
                        classes = "custom-botao cor-botao-pronto-entrega";
                }
                break;
            case StatusPedido.EmTransito:
                if (DesabilitaBotaoEmTransito)
                {
                    if (SessaoUsuario.TipoUsuario == TipoUsuario.Cliente)
                        classes = "disabled-stack custom-botao-cliente cor-botao-em-transito";
                    else
                        classes = "disabled-stack custom-botao cor-botao-em-transito";
                }
                else
                {
                    if (SessaoUsuario.TipoUsuario == TipoUsuario.Cliente)
                        classes = "custom-botao-cliente cor-botao-em-transito";
                    else
                        classes = "custom-botao cor-botao-em-transito";
                }
                break;
            case StatusPedido.Finalizado:
                if (DesabilitaBotaoFinalizado)
                {
                    if (SessaoUsuario.TipoUsuario == TipoUsuario.Cliente)
                        classes = "disabled-stack custom-botao-cliente cor-botao-finalizado";
                    else
                        classes = "disabled-stack custom-botao cor-botao-finalizado";
                }
                else
                {
                    if (SessaoUsuario.TipoUsuario == TipoUsuario.Cliente)
                        classes = "custom-botao-cliente cor-botao-finalizado";
                    else
                        classes = "custom-botao cor-botao-finalizado";
                }
                break;
        }
        return classes;
    }
}
